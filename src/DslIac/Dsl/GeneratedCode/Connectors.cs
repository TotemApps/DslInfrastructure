//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace Variamos.IacTemplateGenerator.IacLanguage
{
	/// <summary>
	/// DomainClass VmNetworkInterfaceConnector
	/// Description for
	/// Variamos.IacTemplateGenerator.IacLanguage.VmNetworkInterfaceConnector
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.VmNetworkInterfaceConnector.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.VmNetworkInterfaceConnector.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ad4cd0b1-a345-4596-9ff0-49fb73078779")]
	public partial class VmNetworkInterfaceConnector : DslDiagrams::BinaryLinkShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with VmNetworkInterfaceConnector.
		/// </summary>
		public static DslDiagrams::Decorator FindVmNetworkInterfaceConnectorDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		
		#region Connector styles
		/// <summary>
		/// Gets the default line routing style for this connector.
		/// </summary>
		[global::System.CLSCompliant(false)]
		protected override DslDiagrams::GraphObject.VGRoutingStyle DefaultRoutingStyle
		{
			get
			{
				return DslDiagrams::GraphObject.VGRoutingStyle.VGRouteStraight;
			}
		}
		#endregion
		
		#region Constructors, domain class Id
	
		/// <summary>
		/// VmNetworkInterfaceConnector domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xad4cd0b1, 0xa345, 0x4596, 0x9f, 0xf0, 0x49, 0xfb, 0x73, 0x07, 0x87, 0x79);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VmNetworkInterfaceConnector(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public VmNetworkInterfaceConnector(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
