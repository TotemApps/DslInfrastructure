//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Variamos.IacTemplateGenerator.IacLanguage
{
	/// <summary>
	/// DomainRelationship IacModelHasVms
	/// Description for Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f8e23beb-7130-4b8b-bccc-fd99d7a1b483")]
	public partial class IacModelHasVms : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IacModelHasVms domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf8e23beb, 0x7130, 0x4b8b, 0xbc, 0xcc, 0xfd, 0x99, 0xd7, 0xa1, 0xb4, 0x83);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IacModelHasVms link in the same Partition as the given IacModel
		/// </summary>
		/// <param name="source">IacModel to use as the source of the relationship.</param>
		/// <param name="target">Vm to use as the target of the relationship.</param>
		public IacModelHasVms(IacModel source, Vm target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IacModelHasVms.IacModelDomainRoleId, source), new DslModeling::RoleAssignment(IacModelHasVms.VmDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IacModelHasVms(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IacModelHasVms(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IacModelHasVms(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IacModelHasVms(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IacModel domain role code
		
		/// <summary>
		/// IacModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid IacModelDomainRoleId = new global::System.Guid(0x1366c89a, 0x0345, 0x44bb, 0x8a, 0xd5, 0xc5, 0xba, 0x5e, 0xe3, 0x81, 0xd5);
		
		/// <summary>
		/// DomainRole IacModel
		/// Description for
		/// Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms.IacModel
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms/IacModel.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms/IacModel.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Vms", PropertyDisplayNameKey="Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms/IacModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1366c89a-0345-44bb-8ad5-c5ba5ee381d5")]
		public virtual IacModel IacModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IacModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, IacModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IacModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IacModel of a Vm
		/// <summary>
		/// Gets IacModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IacModel GetIacModel(Vm element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VmDomainRoleId) as IacModel;
		}
		
		/// <summary>
		/// Sets IacModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIacModel(Vm element, IacModel newIacModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VmDomainRoleId, newIacModel);
		}
		#endregion
		#region Vm domain role code
		
		/// <summary>
		/// Vm domain role Id.
		/// </summary>
		public static readonly global::System.Guid VmDomainRoleId = new global::System.Guid(0xee01621b, 0x4fc7, 0x4f3d, 0x95, 0xce, 0x92, 0x41, 0x12, 0x25, 0x66, 0x26);
		
		/// <summary>
		/// DomainRole Vm
		/// Description for Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms.Vm
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms/Vm.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms/Vm.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IacModel", PropertyDisplayNameKey="Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms/Vm.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ee01621b-4fc7-4f3d-95ce-924112256626")]
		public virtual Vm Vm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Vm)DslModeling::DomainRoleInfo.GetRolePlayer(this, VmDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VmDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Vms of a IacModel
		/// <summary>
		/// Gets a list of Vms.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Vm> GetVms(IacModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Vm>, Vm>(element, IacModelDomainRoleId);
		}
		#endregion
		#region IacModel link accessor
		/// <summary>
		/// Get the list of IacModelHasVms links to a IacModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms> GetLinksToVms ( global::Variamos.IacTemplateGenerator.IacLanguage.IacModel iacModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms>(iacModelInstance, global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms.IacModelDomainRoleId);
		}
		#endregion
		#region Vm link accessor
		/// <summary>
		/// Get the IacModelHasVms link to a Vm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms GetLinkToIacModel (global::Variamos.IacTemplateGenerator.IacLanguage.Vm vmInstance)
		{
			global::System.Collections.Generic.IList<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms>(vmInstance, global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms.VmDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Vm not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IacModelHasVms instance accessors
		
		/// <summary>
		/// Get any IacModelHasVms links between a given IacModel and a Vm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms> GetLinks( global::Variamos.IacTemplateGenerator.IacLanguage.IacModel source, global::Variamos.IacTemplateGenerator.IacLanguage.Vm target )
		{
			global::System.Collections.Generic.List<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms> outLinks = new global::System.Collections.Generic.List<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms>();
			global::System.Collections.Generic.IList<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms>(source, global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms.IacModelDomainRoleId);
			foreach ( global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms link in links )
			{
				if ( target.Equals(link.Vm) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IacModelHasVms link between a given IacModeland a Vm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms GetLink( global::Variamos.IacTemplateGenerator.IacLanguage.IacModel source, global::Variamos.IacTemplateGenerator.IacLanguage.Vm target )
		{
			global::System.Collections.Generic.IList<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms>(source, global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms.IacModelDomainRoleId);
			foreach ( global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasVms link in links )
			{
				if ( target.Equals(link.Vm) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Variamos.IacTemplateGenerator.IacLanguage
{
	/// <summary>
	/// DomainRelationship IacModelHasNetworkInterfaced
	/// Description for
	/// Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ac2752f8-8ebd-4928-b5b3-8376ffce88bd")]
	public partial class IacModelHasNetworkInterfaced : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IacModelHasNetworkInterfaced domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xac2752f8, 0x8ebd, 0x4928, 0xb5, 0xb3, 0x83, 0x76, 0xff, 0xce, 0x88, 0xbd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IacModelHasNetworkInterfaced link in the same Partition as the given IacModel
		/// </summary>
		/// <param name="source">IacModel to use as the source of the relationship.</param>
		/// <param name="target">NetworkInterface to use as the target of the relationship.</param>
		public IacModelHasNetworkInterfaced(IacModel source, NetworkInterface target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IacModelHasNetworkInterfaced.IacModelDomainRoleId, source), new DslModeling::RoleAssignment(IacModelHasNetworkInterfaced.NetworkInterfaceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IacModelHasNetworkInterfaced(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IacModelHasNetworkInterfaced(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IacModelHasNetworkInterfaced(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IacModelHasNetworkInterfaced(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IacModel domain role code
		
		/// <summary>
		/// IacModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid IacModelDomainRoleId = new global::System.Guid(0xdd3478e2, 0x58eb, 0x4d47, 0xb8, 0xc4, 0xfb, 0x1f, 0xaf, 0x99, 0x5d, 0xdd);
		
		/// <summary>
		/// DomainRole IacModel
		/// Description for
		/// Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced.IacModel
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced/IacModel.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced/IacModel.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NetworkInterfaced", PropertyDisplayNameKey="Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced/IacModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd3478e2-58eb-4d47-b8c4-fb1faf995ddd")]
		public virtual IacModel IacModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IacModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, IacModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IacModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IacModel of a NetworkInterface
		/// <summary>
		/// Gets IacModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IacModel GetIacModel(NetworkInterface element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NetworkInterfaceDomainRoleId) as IacModel;
		}
		
		/// <summary>
		/// Sets IacModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIacModel(NetworkInterface element, IacModel newIacModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NetworkInterfaceDomainRoleId, newIacModel);
		}
		#endregion
		#region NetworkInterface domain role code
		
		/// <summary>
		/// NetworkInterface domain role Id.
		/// </summary>
		public static readonly global::System.Guid NetworkInterfaceDomainRoleId = new global::System.Guid(0x03f18c53, 0xf437, 0x4724, 0xa3, 0xd6, 0x2e, 0x38, 0xd0, 0x0c, 0x4a, 0x1b);
		
		/// <summary>
		/// DomainRole NetworkInterface
		/// Description for
		/// Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced.NetworkInterface
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced/NetworkInterface.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced/NetworkInterface.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IacModel", PropertyDisplayNameKey="Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced/NetworkInterface.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("03f18c53-f437-4724-a3d6-2e38d00c4a1b")]
		public virtual NetworkInterface NetworkInterface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NetworkInterface)DslModeling::DomainRoleInfo.GetRolePlayer(this, NetworkInterfaceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NetworkInterfaceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NetworkInterfaced of a IacModel
		/// <summary>
		/// Gets a list of NetworkInterfaced.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NetworkInterface> GetNetworkInterfaced(IacModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NetworkInterface>, NetworkInterface>(element, IacModelDomainRoleId);
		}
		#endregion
		#region IacModel link accessor
		/// <summary>
		/// Get the list of IacModelHasNetworkInterfaced links to a IacModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced> GetLinksToNetworkInterfaced ( global::Variamos.IacTemplateGenerator.IacLanguage.IacModel iacModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced>(iacModelInstance, global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced.IacModelDomainRoleId);
		}
		#endregion
		#region NetworkInterface link accessor
		/// <summary>
		/// Get the IacModelHasNetworkInterfaced link to a NetworkInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced GetLinkToIacModel (global::Variamos.IacTemplateGenerator.IacLanguage.NetworkInterface networkInterfaceInstance)
		{
			global::System.Collections.Generic.IList<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced>(networkInterfaceInstance, global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced.NetworkInterfaceDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NetworkInterface not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IacModelHasNetworkInterfaced instance accessors
		
		/// <summary>
		/// Get any IacModelHasNetworkInterfaced links between a given IacModel and a NetworkInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced> GetLinks( global::Variamos.IacTemplateGenerator.IacLanguage.IacModel source, global::Variamos.IacTemplateGenerator.IacLanguage.NetworkInterface target )
		{
			global::System.Collections.Generic.List<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced> outLinks = new global::System.Collections.Generic.List<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced>();
			global::System.Collections.Generic.IList<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced>(source, global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced.IacModelDomainRoleId);
			foreach ( global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced link in links )
			{
				if ( target.Equals(link.NetworkInterface) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IacModelHasNetworkInterfaced link between a given IacModeland a NetworkInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced GetLink( global::Variamos.IacTemplateGenerator.IacLanguage.IacModel source, global::Variamos.IacTemplateGenerator.IacLanguage.NetworkInterface target )
		{
			global::System.Collections.Generic.IList<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced>(source, global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced.IacModelDomainRoleId);
			foreach ( global::Variamos.IacTemplateGenerator.IacLanguage.IacModelHasNetworkInterfaced link in links )
			{
				if ( target.Equals(link.NetworkInterface) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Variamos.IacTemplateGenerator.IacLanguage
{
	/// <summary>
	/// DomainRelationship VmReferencesNetworkInterfaced
	/// Description for
	/// Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced
	/// </summary>
	[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("08568fe9-0f1b-4448-9b2a-59ce80a30fe2")]
	public partial class VmReferencesNetworkInterfaced : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// VmReferencesNetworkInterfaced domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x08568fe9, 0x0f1b, 0x4448, 0x9b, 0x2a, 0x59, 0xce, 0x80, 0xa3, 0x0f, 0xe2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a VmReferencesNetworkInterfaced link in the same Partition as the given Vm
		/// </summary>
		/// <param name="source">Vm to use as the source of the relationship.</param>
		/// <param name="target">NetworkInterface to use as the target of the relationship.</param>
		public VmReferencesNetworkInterfaced(Vm source, NetworkInterface target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(VmReferencesNetworkInterfaced.VmDomainRoleId, source), new DslModeling::RoleAssignment(VmReferencesNetworkInterfaced.NetworkInterfaceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VmReferencesNetworkInterfaced(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VmReferencesNetworkInterfaced(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public VmReferencesNetworkInterfaced(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public VmReferencesNetworkInterfaced(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Vm domain role code
		
		/// <summary>
		/// Vm domain role Id.
		/// </summary>
		public static readonly global::System.Guid VmDomainRoleId = new global::System.Guid(0x8a3ed4d2, 0x1007, 0x48c2, 0x83, 0xa5, 0x5d, 0x00, 0x82, 0xf1, 0x7f, 0xe1);
		
		/// <summary>
		/// DomainRole Vm
		/// Description for
		/// Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced.Vm
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced/Vm.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced/Vm.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NetworkInterfaced", PropertyDisplayNameKey="Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced/Vm.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8a3ed4d2-1007-48c2-83a5-5d0082f17fe1")]
		public virtual Vm Vm
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Vm)DslModeling::DomainRoleInfo.GetRolePlayer(this, VmDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VmDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Vms of a NetworkInterface
		/// <summary>
		/// Gets a list of Vms.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Vm> GetVms(NetworkInterface element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Vm>, Vm>(element, NetworkInterfaceDomainRoleId);
		}
		#endregion
		#region NetworkInterface domain role code
		
		/// <summary>
		/// NetworkInterface domain role Id.
		/// </summary>
		public static readonly global::System.Guid NetworkInterfaceDomainRoleId = new global::System.Guid(0x5fb7384e, 0x3f3c, 0x49f1, 0x81, 0x06, 0x89, 0xa4, 0x85, 0xb0, 0xa9, 0xb3);
		
		/// <summary>
		/// DomainRole NetworkInterface
		/// Description for
		/// Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced.NetworkInterface
		/// </summary>
		[DslDesign::DisplayNameResource("Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced/NetworkInterface.DisplayName", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced/NetworkInterface.Description", typeof(global::Variamos.IacTemplateGenerator.IacLanguage.IacLanguageDomainModel), "Variamos.IacTemplateGenerator.IacLanguage.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Vms", PropertyDisplayNameKey="Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced/NetworkInterface.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5fb7384e-3f3c-49f1-8106-89a485b0a9b3")]
		public virtual NetworkInterface NetworkInterface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NetworkInterface)DslModeling::DomainRoleInfo.GetRolePlayer(this, NetworkInterfaceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NetworkInterfaceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NetworkInterfaced of a Vm
		/// <summary>
		/// Gets a list of NetworkInterfaced.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<NetworkInterface> GetNetworkInterfaced(Vm element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NetworkInterface>, NetworkInterface>(element, VmDomainRoleId);
		}
		#endregion
		#region Vm link accessor
		/// <summary>
		/// Get the list of VmReferencesNetworkInterfaced links to a Vm.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced> GetLinksToNetworkInterfaced ( global::Variamos.IacTemplateGenerator.IacLanguage.Vm vmInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced>(vmInstance, global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced.VmDomainRoleId);
		}
		#endregion
		#region NetworkInterface link accessor
		/// <summary>
		/// Get the list of VmReferencesNetworkInterfaced links to a NetworkInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced> GetLinksToVms ( global::Variamos.IacTemplateGenerator.IacLanguage.NetworkInterface networkInterfaceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced>(networkInterfaceInstance, global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced.NetworkInterfaceDomainRoleId);
		}
		#endregion
		#region VmReferencesNetworkInterfaced instance accessors
		
		/// <summary>
		/// Get any VmReferencesNetworkInterfaced links between a given Vm and a NetworkInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced> GetLinks( global::Variamos.IacTemplateGenerator.IacLanguage.Vm source, global::Variamos.IacTemplateGenerator.IacLanguage.NetworkInterface target )
		{
			global::System.Collections.Generic.List<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced> outLinks = new global::System.Collections.Generic.List<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced>();
			global::System.Collections.Generic.IList<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced>(source, global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced.VmDomainRoleId);
			foreach ( global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced link in links )
			{
				if ( target.Equals(link.NetworkInterface) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one VmReferencesNetworkInterfaced link between a given Vmand a NetworkInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced GetLink( global::Variamos.IacTemplateGenerator.IacLanguage.Vm source, global::Variamos.IacTemplateGenerator.IacLanguage.NetworkInterface target )
		{
			global::System.Collections.Generic.IList<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced>(source, global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced.VmDomainRoleId);
			foreach ( global::Variamos.IacTemplateGenerator.IacLanguage.VmReferencesNetworkInterfaced link in links )
			{
				if ( target.Equals(link.NetworkInterface) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
